{"version":3,"sources":["Components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","columns","data","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","cellProps","getCellProps","innerCell","Header","key","href","values","link","Styles","styled","div","roundNumber","n","Math","round","getOtoDaggers","item","agility","crit","hit","strength","attackPower","getOtoSwords","getPercentage","getInt","DATA_BY_BUCKETS","parry","dodge","armor","stamina","otoDaggers","otoSwords","reduce","slot","push","BUCKETS","Object","keys","COLUMNS","accessor","show","App","useState","currentSlot","setSlot","htmlFor","id","name","onChange","e","target","value","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eadf0102.chunk.js","sourcesContent":["import { useTable, useSortBy } from 'react-table'\nimport React from 'react';\n\nexport default function Table({ columns, data }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useSortBy\n  )\n\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render('Header')}\n                  {/* Add a sort direction indicator */}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' ðŸ”½'\n                        : ' ðŸ”¼'\n                      : ''}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map(\n            (row, i) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => {\n                    const cellProps = cell.getCellProps();\n                    const innerCell = (\n                      <td {...cellProps}>{cell.render('Cell')}</td>\n                    );\n\n                    const isNameCell = cell.column.Header === 'Name';\n                    return isNameCell ? (\n                      <a key={cellProps.key} href={cell.row.values.link}>\n                        {innerCell}\n                      </a>\n                    ) : innerCell\n                  })}\n                </tr>\n              )\n            }\n          )}\n        </tbody>\n      </table>\n    </>\n  )\n}\n","import React, { useState } from 'react';\nimport styled from 'styled-components'\nimport { Box } from 'rebass';\nimport { Label, Select } from '@rebass/forms';\n\nimport Table from './Components/Table';\nimport data from './Fixture/ROGUE_GEAR.json'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\nfunction roundNumber(n) {\n  return Math.round(n * 10) / 10;\n}\n\nfunction getOtoDaggers(item) {\n  const { agility, crit, hit, strength, attackPower } = item;\n\n  return roundNumber((crit * 2500) + (hit * 1800) + (agility * 2) + (strength * 1.1) + attackPower);\n}\n\nfunction getOtoSwords(item) {\n  const { agility, crit, hit, strength, attackPower } = item;\n\n  return roundNumber((crit * 2900) + (hit * 2100) + (agility * 2.2) + (strength * 1.1) + attackPower);\n}\n\nfunction getPercentage(n) {\n  return n ? `${n * 100}%` : '';\n}\n\nfunction getInt(n) {\n  return n || '';\n}\n\nconst DATA_BY_BUCKETS = data.map(item => {\n  const { crit, hit, parry, dodge, armor, agility, stamina, strength, attackPower } = item;\n  return {...item,\n    otoDaggers: getOtoDaggers(item),\n    otoSwords: getOtoSwords(item),\n    crit: getPercentage(crit),\n    hit: getPercentage(hit),\n    parry: getPercentage(parry),\n    dodge: getPercentage(dodge),\n    armor: getInt(armor),\n    agility: getInt(agility),\n    stamina: getInt(stamina),\n    strength: getInt(strength),\n    attackPower: getInt(attackPower),\n  }\n}).reduce((map, item) => {\n  const { slot } = item;\n  if (map[slot]) {\n    map[slot].push(item);\n  } else {\n    map[slot] = [item];\n  }\n\n  return map;\n}, {});\nconst BUCKETS = Object.keys(DATA_BY_BUCKETS);\nconst COLUMNS = [\n  { Header: 'Name', accessor: 'name' },\n  { Header: 'Oto Swords', accessor: 'otoSwords' },\n  { Header: 'Oto Daggers', accessor: 'otoDaggers' },\n  { Header: 'AEP', accessor: 'aep' },\n  { Header: 'MAEP', accessor: 'maep' },\n  { Header: 'Location', accessor: 'loc' },\n  { Header: 'Phase', accessor: 'phase' },\n  { Header: 'Info', accessor: 'info' },\n  { Header: 'Source', accessor: 'source' },\n  { Header: 'Set', accessor: 'set' },\n  { Header: 'Level', accessor: 'lvl' },\n  { Header: 'Binds on', accessor: 'bindOn' },\n  { Header: 'Armor', accessor: 'armor' },\n  { Header: 'Agility', accessor: 'agility' },\n  { Header: 'Stamina', accessor: 'stamina' },\n  { Header: 'Strength', accessor: 'strength' },\n  { Header: 'Attack Power', accessor: 'attackPower' },\n  { Header: 'Crit Chance', accessor: 'crit' },\n  { Header: 'Hit Chance', accessor: 'hit' },\n  { Header: 'Parry Chance', accessor: 'parry' },\n  { Header: 'Dodge Chance', accessor: 'dodge' },\n  { Header: 'Defense', accessor: 'defense' },\n  { Header: 'Special', accessor: 'special' },\n  { Header: 'Link', accessor: 'link', show: false }\n]\n\nfunction App() {\n  const [currentSlot, setSlot] = useState(BUCKETS[0]);\n  const data = DATA_BY_BUCKETS[currentSlot];\n\n  return (\n    <Styles>\n      <Box>\n        <Label htmlFor='slot'>Slot</Label>\n        <Select\n          id='slot'\n          name='slot'\n          onChange={(e) => setSlot(e.target.value)}\n          value={currentSlot}>\n            {BUCKETS.map(slot => (\n              <option key={slot}>{slot}</option>\n            ))}\n          </Select>\n      </Box>\n      <Table columns={COLUMNS} data={data} />\n    </Styles>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}